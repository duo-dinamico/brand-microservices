version: "3.7"

name: brand_microservices

services:
  brand_api:
    container_name: brand_api
    depends_on:
      brand_db:
        condition: service_healthy
    ports:
      - "8000:8000"
    build:
      dockerfile: ./apis/brand_api/Dockerfile
      context: .
    environment:
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_MINUTES=10080
      - ALGORITHM=HS256
      - JWT_SECRET_KEY
      - JWT_REFRESH_SECRET_KEY
      - PSUSER
      - PSPASSWD
      - SQLALCHEMY_DATABASE_URL=postgresql+psycopg2://${PSUSER}:${PSPASSWD}@brand_db/brand_db_${ENVIRONMENT}
    volumes:
      - ./apis/brand_api:/home/user/apis/brand_api

  brand_api_production:
    container_name: brand_api_production
    depends_on:
      brand_db:
        condition: service_healthy
    expose:
      - 80
    restart: always
    build:
      dockerfile: ./apis/brand_api/Dockerfile
      target: prod
      context: .
    environment:
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_MINUTES=10080
      - ALGORITHM=HS256
      - JWT_SECRET_KEY
      - JWT_REFRESH_SECRET_KEY
      - PSUSER
      - PSPASSWD
      - SQLALCHEMY_DATABASE_URL=postgresql+psycopg2://${PSUSER}:${PSPASSWD}@brand_db/brand_db_${ENVIRONMENT}
    labels: # new
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi.rule=Host(`duodinamico.online`)"
      - "traefik.http.routers.fastapi.tls=true"
      - "traefik.http.routers.fastapi.tls.certresolver=letsencrypt"

  unit:
    container_name: brand_api_unit
    depends_on:
      brand_db:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./apis/brand_api/Dockerfile
      target: test
    environment:
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_MINUTES=10080
      - ALGORITHM=HS256
      - JWT_SECRET_KEY
      - JWT_REFRESH_SECRET_KEY
      - PSUSER
      - PSPASSWD
      - SQLALCHEMY_DATABASE_URL=postgresql+psycopg2://${PSUSER}:${PSPASSWD}@brand_db/brand_db_${ENVIRONMENT}
    volumes:
      - ./apis/brand_api:/home/user/apis/brand_api

  ci:
    container_name: brand_api_ci
    depends_on:
      brand_db:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./apis/brand_api/Dockerfile
      target: test
    environment:
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_MINUTES=10080
      - ALGORITHM=HS256
      - JWT_SECRET_KEY
      - JWT_REFRESH_SECRET_KEY
      - PSUSER
      - PSPASSWD
      - SQLALCHEMY_DATABASE_URL=postgresql+psycopg2://${PSUSER}:${PSPASSWD}@brand_db/brand_db_${ENVIRONMENT}
    volumes:
      - ./apis/brand_api:/home/user/apis/brand_api

  brand_db:
    container_name: brand_db_${ENVIRONMENT}
    image: postgres:13
    volumes:
      - psql_db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${PSUSER}
      - POSTGRES_PASSWORD=${PSPASSWD}
      - POSTGRES_DB=brand_db_${ENVIRONMENT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PSUSER} -d brand_db_${ENVIRONMENT}"]
      interval: 5s
      timeout: 5s
      retries: 3

  traefik: # new
    build:
      context: .
      dockerfile: Dockerfile.traefik
    ports:
      - 80:80
      - 443:443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik-public-certificates:/certificates"
    environment:
      - TFUSERNAME
      - TFPASSWORD
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.duodinamico.online`) && (PathPrefix(`/`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TFUSERNAME}:${TFPASSWORD}"

volumes:
  psql_db:

"""remodel_brands_with_socials

Revision ID: 0007
Revises: 0006
Create Date: 2023-03-28 20:36:02.575647

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0007"
down_revision = "0006"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "roles",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "socials",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "brands_socials",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("brand_id", sa.Uuid(), nullable=False),
        sa.Column("social_id", sa.Uuid(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("created_by_id", sa.Uuid(), nullable=False),
        sa.Column("updated_by_id", sa.Uuid(), nullable=False),
        sa.Column("deleted_by_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["brand_id"],
            ["brands.id"],
        ),
        sa.ForeignKeyConstraint(["created_by_id"], ["users.id"], name="users_id_created_by"),
        sa.ForeignKeyConstraint(["deleted_by_id"], ["users.id"], name="users_id_deleted_by"),
        sa.ForeignKeyConstraint(
            ["social_id"],
            ["socials.id"],
        ),
        sa.ForeignKeyConstraint(["updated_by_id"], ["users.id"], name="users_id_updated_by"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("address"),
    )
    op.alter_column("brands", "name", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("brands", "category_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("brands", "average_price", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("brands", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("brands", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("brands", "deleted_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("brands", "created_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("brands", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("brands", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.drop_constraint("brands_website_key", "brands", type_="unique")
    op.drop_column("brands", "website")
    op.drop_column("brands", "rating")
    op.alter_column("categories", "name", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("categories", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("categories", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("categories", "deleted_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("categories", "created_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("categories", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("categories", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.drop_column("categories", "description")
    op.drop_column("categories", "price_per_category")
    op.add_column("users", sa.Column("role_id", sa.Uuid(), nullable=True))
    op.alter_column("users", "username", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("users", "password", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("users", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("users", "deleted_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("users", "created_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("users", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("users", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.create_foreign_key(None, "users", "roles", ["role_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "users", type_="foreignkey")
    op.alter_column("users", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("users", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("users", "created_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("users", "deleted_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("users", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("users", "password", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("users", "username", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_column("users", "role_id")
    op.add_column(
        "categories",
        sa.Column(
            "price_per_category",
            postgresql.ENUM("one", "two", "three", "four", "five", name="myenum"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column("categories", sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.alter_column("categories", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("categories", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("categories", "created_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("categories", "deleted_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("categories", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("categories", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("categories", "name", existing_type=sa.VARCHAR(), nullable=True)
    op.add_column("brands", sa.Column("rating", sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column("brands", sa.Column("website", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_unique_constraint("brands_website_key", "brands", ["website"])
    op.alter_column("brands", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("brands", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("brands", "created_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("brands", "deleted_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("brands", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("brands", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("brands", "average_price", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("brands", "category_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("brands", "name", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_table("brands_socials")
    op.drop_table("socials")
    op.drop_table("roles")
    # ### end Alembic commands ###

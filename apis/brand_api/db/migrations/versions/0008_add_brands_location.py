"""add_brands_location

Revision ID: 0008
Revises: 0007
Create Date: 2023-04-02 19:25:18.746622

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0008"
down_revision = "0007"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("brands", sa.Column("line_address_1", sa.String(), nullable=True))
    op.add_column("brands", sa.Column("line_address_2", sa.String(), nullable=True))
    op.add_column("brands", sa.Column("city", sa.String(), nullable=True))
    op.add_column("brands", sa.Column("postal_code", sa.String(), nullable=True))
    op.alter_column("brands", "average_price", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("brands", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("brands", "deleted_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("brands", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("brands", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("brands_socials", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("brands_socials", "deleted_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("brands_socials", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("brands_socials", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("categories", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("categories", "deleted_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("categories", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("categories", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("users", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("users", "deleted_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("users", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    op.alter_column("users", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("users", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("users", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("users", "deleted_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("users", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("categories", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("categories", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("categories", "deleted_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("categories", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("brands_socials", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("brands_socials", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("brands_socials", "deleted_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("brands_socials", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("brands", "deleted_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("brands", "updated_at", existing_type=postgresql.TIMESTAMP(), nullable=False)
    op.alter_column("brands", "deleted_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("brands", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("brands", "average_price", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_column("brands", "postal_code")
    op.drop_column("brands", "city")
    op.drop_column("brands", "line_address_2")
    op.drop_column("brands", "line_address_1")
    # ### end Alembic commands ###

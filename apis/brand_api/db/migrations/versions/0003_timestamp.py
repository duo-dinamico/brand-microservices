"""timestamp

Revision ID: 0003
Revises: 0002
Create Date: 2023-01-25 16:09:15.779576

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0003"
down_revision = "0002"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("brands", sa.Column("created_by", postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column("brands", sa.Column("updated_by", postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column("brands", sa.Column("deleted_by", postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column("brands", sa.Column("created_at", sa.DateTime(), nullable=True))
    op.add_column("brands", sa.Column("updated_at", sa.DateTime(), nullable=True))
    op.add_column("brands", sa.Column("deleted_at", sa.DateTime(), nullable=True))
    op.create_foreign_key("users_id_deleted_by", "brands", "users", ["deleted_by"], ["id"])
    op.create_foreign_key("users_id_updated_by", "brands", "users", ["updated_by"], ["id"])
    op.create_foreign_key("users_id_created_by", "brands", "users", ["created_by"], ["id"])
    op.add_column("categories", sa.Column("created_by", postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column("categories", sa.Column("updated_by", postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column("categories", sa.Column("deleted_by", postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column("categories", sa.Column("created_at", sa.DateTime(), nullable=True))
    op.add_column("categories", sa.Column("updated_at", sa.DateTime(), nullable=True))
    op.add_column("categories", sa.Column("deleted_at", sa.DateTime(), nullable=True))
    op.create_foreign_key("users_id_updated_by", "categories", "users", ["updated_by"], ["id"])
    op.create_foreign_key("users_id_deleted_by", "categories", "users", ["deleted_by"], ["id"])
    op.create_foreign_key("users_id_created_by", "categories", "users", ["created_by"], ["id"])
    op.add_column("users", sa.Column("updated_by", postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column("users", sa.Column("deleted_by", postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column("users", sa.Column("created_at", sa.DateTime(), nullable=True))
    op.add_column("users", sa.Column("updated_at", sa.DateTime(), nullable=True))
    op.add_column("users", sa.Column("deleted_at", sa.DateTime(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("users", "deleted_at")
    op.drop_column("users", "updated_at")
    op.drop_column("users", "created_at")
    op.drop_column("users", "deleted_by")
    op.drop_column("users", "updated_by")
    op.drop_constraint("users_id_created_by", "categories", type_="foreignkey")
    op.drop_constraint("users_id_deleted_by", "categories", type_="foreignkey")
    op.drop_constraint("users_id_updated_by", "categories", type_="foreignkey")
    op.drop_column("categories", "deleted_at")
    op.drop_column("categories", "updated_at")
    op.drop_column("categories", "created_at")
    op.drop_column("categories", "deleted_by")
    op.drop_column("categories", "updated_by")
    op.drop_column("categories", "created_by")
    op.drop_constraint("users_id_created_by", "brands", type_="foreignkey")
    op.drop_constraint("users_id_updated_by", "brands", type_="foreignkey")
    op.drop_constraint("users_id_deleted_by", "brands", type_="foreignkey")
    op.drop_column("brands", "deleted_at")
    op.drop_column("brands", "updated_at")
    op.drop_column("brands", "created_at")
    op.drop_column("brands", "deleted_by")
    op.drop_column("brands", "updated_by")
    op.drop_column("brands", "created_by")
    # ### end Alembic commands ###
